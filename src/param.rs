use ark_bls12_381::Bls12_381;
use ark_crypto_primitives::{
    commitment::pedersen::{constraints::CommGadget, Commitment, Window},
    crh::{
        pedersen::{constraints::CRHGadget, CRH},
        FixedLengthCRH, FixedLengthCRHGadget,
    },
    merkle_tree::{Config, Digest, Path},
    CommitmentScheme, MerkleTree, SNARK, *,
};
use ark_ed_on_bls12_381::{constraints::EdwardsVar, EdwardsParameters, EdwardsProjective, Fq};
use ark_groth16::Groth16;
use ark_r1cs_std::{fields::fp::FpVar, groups::curves::twisted_edwards::AffineVar};

/// pre-computed. serialized verification key
pub const TRANSFERVKBYTES: [u8; 872] = [
    75, 127, 234, 63, 80, 11, 23, 149, 224, 42, 237, 45, 193, 110, 219, 78, 35, 119, 52, 28, 154,
    116, 69, 233, 213, 255, 247, 153, 121, 148, 90, 193, 103, 255, 119, 57, 234, 121, 196, 247,
    229, 69, 143, 100, 148, 86, 127, 22, 221, 135, 143, 40, 132, 145, 100, 124, 242, 0, 72, 30,
    178, 127, 230, 45, 114, 22, 118, 232, 165, 103, 51, 109, 186, 154, 4, 170, 220, 119, 111, 143,
    206, 248, 190, 180, 217, 207, 167, 102, 65, 41, 121, 34, 60, 116, 135, 19, 235, 203, 215, 182,
    50, 170, 177, 0, 53, 62, 189, 47, 111, 189, 194, 183, 134, 195, 56, 97, 202, 208, 181, 200, 29,
    131, 112, 234, 174, 45, 91, 205, 101, 179, 21, 46, 212, 243, 8, 150, 202, 200, 133, 136, 21,
    196, 60, 132, 67, 197, 33, 126, 144, 134, 181, 12, 2, 72, 198, 154, 188, 192, 126, 165, 242,
    116, 223, 20, 239, 174, 162, 249, 141, 63, 199, 188, 16, 172, 72, 200, 167, 252, 130, 65, 121,
    0, 34, 113, 47, 77, 83, 252, 141, 222, 129, 14, 167, 197, 129, 33, 246, 113, 116, 153, 22, 181,
    29, 153, 251, 100, 197, 56, 61, 103, 115, 248, 238, 175, 219, 95, 201, 11, 183, 38, 87, 108,
    184, 29, 246, 107, 117, 107, 137, 12, 149, 143, 167, 81, 80, 121, 37, 76, 222, 5, 198, 58, 229,
    46, 150, 242, 57, 56, 176, 211, 71, 53, 18, 202, 94, 218, 115, 124, 144, 127, 86, 225, 192, 22,
    33, 111, 237, 231, 179, 105, 253, 12, 61, 205, 144, 212, 69, 135, 201, 232, 9, 93, 23, 142,
    205, 214, 232, 14, 24, 34, 219, 4, 245, 46, 205, 113, 227, 208, 185, 193, 124, 232, 156, 177,
    144, 209, 121, 147, 153, 84, 242, 249, 231, 16, 148, 121, 75, 30, 252, 10, 135, 174, 200, 66,
    146, 251, 112, 51, 57, 180, 148, 214, 200, 160, 159, 145, 11, 0, 0, 0, 0, 0, 0, 0, 147, 144,
    56, 236, 132, 169, 127, 62, 129, 53, 22, 141, 31, 172, 10, 65, 172, 115, 87, 236, 177, 243,
    110, 25, 197, 187, 206, 98, 214, 7, 29, 184, 69, 215, 70, 222, 23, 9, 12, 251, 21, 16, 0, 132,
    246, 2, 49, 9, 200, 186, 3, 75, 134, 248, 34, 104, 39, 39, 187, 32, 41, 147, 45, 238, 149, 10,
    120, 136, 132, 92, 227, 200, 156, 46, 183, 79, 164, 104, 31, 185, 41, 226, 199, 208, 98, 91,
    244, 67, 81, 65, 177, 79, 102, 226, 251, 129, 34, 88, 75, 91, 116, 119, 207, 138, 94, 247, 16,
    21, 141, 35, 125, 188, 243, 200, 191, 83, 61, 40, 182, 76, 46, 143, 171, 29, 145, 217, 133, 8,
    79, 254, 240, 177, 175, 105, 114, 135, 7, 98, 55, 26, 5, 192, 233, 0, 103, 233, 186, 62, 137,
    59, 16, 187, 162, 170, 17, 27, 247, 72, 143, 170, 240, 88, 139, 85, 88, 62, 104, 1, 152, 13,
    223, 74, 92, 117, 33, 173, 25, 21, 109, 255, 178, 212, 165, 132, 132, 24, 172, 138, 21, 197,
    23, 139, 254, 93, 159, 59, 52, 160, 92, 181, 87, 54, 5, 91, 253, 2, 156, 228, 219, 89, 235,
    208, 28, 247, 46, 193, 167, 79, 76, 136, 8, 246, 193, 29, 86, 150, 198, 110, 55, 82, 69, 58,
    124, 100, 112, 28, 119, 84, 15, 5, 125, 79, 180, 57, 158, 104, 34, 71, 143, 19, 252, 25, 104,
    173, 64, 20, 49, 179, 236, 145, 92, 218, 110, 170, 215, 44, 149, 92, 160, 30, 118, 203, 11, 0,
    215, 108, 163, 93, 236, 187, 227, 229, 124, 252, 29, 68, 151, 23, 51, 127, 85, 141, 37, 12,
    148, 124, 122, 94, 112, 157, 227, 95, 90, 122, 209, 26, 119, 109, 93, 54, 103, 249, 184, 214,
    191, 221, 160, 240, 50, 63, 243, 35, 245, 230, 62, 154, 30, 217, 38, 40, 103, 234, 201, 83,
    122, 152, 167, 5, 23, 236, 195, 57, 194, 30, 185, 174, 124, 78, 184, 205, 113, 150, 172, 46,
    235, 149, 197, 141, 149, 12, 215, 20, 199, 184, 226, 9, 133, 116, 120, 33, 54, 173, 71, 58, 52,
    20, 129, 16, 3, 234, 123, 228, 127, 1, 48, 173, 42, 203, 160, 147, 172, 225, 241, 164, 135,
    247, 25, 11, 95, 129, 3, 123, 25, 185, 166, 178, 38, 132, 76, 111, 66, 148, 1, 70, 15, 50, 10,
    24, 190, 246, 202, 185, 135, 201, 27, 73, 219, 137, 236, 74, 210, 147, 206, 136, 245, 86, 22,
    219, 27, 128, 217, 130, 17, 213, 49, 248, 198, 232, 36, 216, 30, 55, 66, 115, 67, 45, 122, 92,
    114, 45, 22, 100, 119, 92, 171, 132, 148, 53, 78, 125, 28, 120, 1, 96, 128, 216, 221, 83, 110,
    146, 241, 80, 142, 72, 73, 50, 78, 43, 150, 29, 115, 186, 206, 228, 61, 111, 96, 93, 167, 29,
    106, 17, 60, 254, 213, 195, 247, 63, 32, 129, 249, 18, 38, 33, 108, 251, 198, 135, 51, 63, 246,
    114, 209, 135, 50, 84, 115, 139,
];

pub const FORFEITVKBYTES: [u8; 728] = [
    75, 127, 234, 63, 80, 11, 23, 149, 224, 42, 237, 45, 193, 110, 219, 78, 35, 119, 52, 28, 154,
    116, 69, 233, 213, 255, 247, 153, 121, 148, 90, 193, 103, 255, 119, 57, 234, 121, 196, 247,
    229, 69, 143, 100, 148, 86, 127, 22, 221, 135, 143, 40, 132, 145, 100, 124, 242, 0, 72, 30,
    178, 127, 230, 45, 114, 22, 118, 232, 165, 103, 51, 109, 186, 154, 4, 170, 220, 119, 111, 143,
    206, 248, 190, 180, 217, 207, 167, 102, 65, 41, 121, 34, 60, 116, 135, 19, 235, 203, 215, 182,
    50, 170, 177, 0, 53, 62, 189, 47, 111, 189, 194, 183, 134, 195, 56, 97, 202, 208, 181, 200, 29,
    131, 112, 234, 174, 45, 91, 205, 101, 179, 21, 46, 212, 243, 8, 150, 202, 200, 133, 136, 21,
    196, 60, 132, 67, 197, 33, 126, 144, 134, 181, 12, 2, 72, 198, 154, 188, 192, 126, 165, 242,
    116, 223, 20, 239, 174, 162, 249, 141, 63, 199, 188, 16, 172, 72, 200, 167, 252, 130, 65, 121,
    0, 34, 113, 47, 77, 83, 252, 141, 222, 129, 14, 167, 197, 129, 33, 246, 113, 116, 153, 22, 181,
    29, 153, 251, 100, 197, 56, 61, 103, 115, 248, 238, 175, 219, 95, 201, 11, 183, 38, 87, 108,
    184, 29, 246, 107, 117, 107, 137, 12, 149, 143, 167, 81, 80, 121, 37, 76, 222, 5, 198, 58, 229,
    46, 150, 242, 57, 56, 176, 211, 71, 53, 18, 202, 94, 218, 115, 124, 144, 127, 86, 225, 192, 22,
    33, 111, 237, 231, 179, 105, 253, 12, 61, 205, 144, 212, 69, 135, 201, 232, 9, 93, 23, 142,
    205, 214, 232, 14, 24, 34, 219, 4, 245, 46, 205, 113, 227, 208, 185, 193, 124, 232, 156, 177,
    144, 209, 121, 147, 153, 84, 242, 249, 231, 16, 148, 121, 75, 30, 252, 10, 135, 174, 200, 66,
    146, 251, 112, 51, 57, 180, 148, 214, 200, 160, 159, 145, 8, 0, 0, 0, 0, 0, 0, 0, 221, 243,
    253, 45, 208, 146, 129, 252, 235, 15, 96, 94, 47, 213, 163, 23, 194, 120, 252, 156, 138, 171,
    82, 29, 251, 147, 9, 216, 69, 131, 204, 193, 121, 190, 29, 207, 223, 62, 91, 144, 107, 99, 247,
    7, 33, 123, 22, 24, 0, 155, 15, 99, 181, 155, 185, 61, 165, 62, 85, 92, 50, 9, 223, 18, 44, 25,
    196, 28, 63, 135, 236, 236, 195, 133, 31, 68, 149, 26, 70, 90, 33, 171, 133, 98, 228, 48, 191,
    78, 15, 40, 163, 10, 85, 81, 107, 132, 237, 128, 140, 244, 29, 8, 45, 142, 147, 50, 13, 45, 80,
    210, 18, 198, 215, 51, 1, 241, 178, 142, 171, 115, 173, 95, 246, 221, 136, 253, 41, 201, 159,
    248, 205, 177, 57, 76, 214, 255, 100, 150, 165, 222, 94, 230, 18, 142, 155, 40, 89, 200, 107,
    163, 35, 42, 47, 200, 80, 239, 218, 89, 76, 98, 33, 41, 225, 56, 79, 116, 34, 56, 209, 35, 234,
    187, 160, 224, 191, 59, 78, 162, 97, 160, 134, 135, 234, 113, 133, 0, 200, 109, 227, 203, 58,
    130, 72, 248, 235, 52, 36, 70, 89, 57, 59, 125, 136, 54, 41, 68, 96, 189, 104, 132, 166, 149,
    10, 78, 245, 33, 223, 94, 84, 178, 75, 89, 223, 147, 189, 201, 22, 125, 108, 48, 225, 49, 231,
    34, 188, 189, 172, 231, 36, 151, 92, 239, 202, 149, 117, 223, 217, 89, 80, 12, 69, 68, 66, 117,
    174, 217, 74, 17, 251, 144, 231, 17, 81, 187, 173, 88, 226, 227, 250, 87, 246, 42, 106, 140, 6,
    172, 36, 10, 159, 165, 166, 33, 62, 174, 180, 217, 147, 16, 194, 80, 209, 10, 88, 12, 213, 233,
    183, 54, 76, 146, 229, 148, 221, 111, 33, 14, 219, 214, 154, 122, 62, 8, 99, 158, 247, 97, 96,
    45, 86, 243, 69, 169, 175, 252, 178, 149, 108, 75, 180, 109, 241, 93, 51, 97, 185, 11, 236,
    123, 243, 250, 3, 125, 121, 85, 20, 47, 244, 138, 121, 174, 246, 167, 41, 81, 43, 63, 122, 68,
    94, 119, 137, 183, 52, 227, 255, 66, 149, 184, 62, 21, 223, 172, 200, 48, 132, 28, 184, 16, 15,
    46, 163, 34, 87, 151,
];

pub const HASHPARAMSEED: [u8; 32] = [1u8; 32];
pub const COMMITPARAMSEED: [u8; 32] = [2u8; 32];
#[allow(dead_code)]
pub const ZKPPARAMSEED: [u8; 32] = [3u8; 32];

//=======================
// pedersen hash and related defintions
// the hash function is defined over the JubJub curve
//=======================
const PERDERSON_WINDOW_SIZE: usize = 4;
const PERDERSON_WINDOW_NUM: usize = 256;

// #leaves = 2^{height - 1}
#[allow(dead_code)]
const MAX_ACC: usize = 512;
const MAX_ACC_TREE_DEPTH: usize = 10;

#[derive(Clone)]
pub struct PedersenWindow;
impl Window for PedersenWindow {
    const WINDOW_SIZE: usize = PERDERSON_WINDOW_SIZE;
    const NUM_WINDOWS: usize = PERDERSON_WINDOW_NUM;
}
pub type Hash = CRH<EdwardsProjective, PedersenWindow>;
#[allow(dead_code)]
pub type HashOutput = <Hash as FixedLengthCRH>::Output;
pub type HashParam = <Hash as FixedLengthCRH>::Parameters;

//=======================
// merkle tree for the ledger, using Perderson hash
//=======================
#[derive(Debug, Clone, Copy)]
pub struct MerkleTreeParams;
impl Config for MerkleTreeParams {
    const HEIGHT: usize = MAX_ACC_TREE_DEPTH;
    type H = Hash;
}
pub type LedgerMerkleTree = MerkleTree<MerkleTreeParams>;
#[allow(dead_code)]
pub type LedgerMerkleTreeRoot = Digest<MerkleTreeParams>;

// the membership is a path on the merkle tree, including the leaf itself
#[allow(dead_code)]
pub type MantaCoinAccountMembership = Path<MerkleTreeParams>;

//=======================
// Commitments
//=======================
pub type MantaCoinCommitmentScheme = Commitment<EdwardsProjective, PedersenWindow>;
pub type MantaCoinCommitmentParam = <MantaCoinCommitmentScheme as CommitmentScheme>::Parameters;
#[allow(dead_code)]
pub type MantaCoinCommitmentOpen = <MantaCoinCommitmentScheme as CommitmentScheme>::Randomness;
pub type MantaCoinCommitmentOutput = <MantaCoinCommitmentScheme as CommitmentScheme>::Output;

// gadgets for hash function
pub type HashVar = CRHGadget<EdwardsProjective, EdwardsVar, PedersenWindow>;
pub type HashOutputVar = <HashVar as FixedLengthCRHGadget<Hash, Fq>>::OutputVar;
pub type HashParamVar = <HashVar as FixedLengthCRHGadget<Hash, Fq>>::ParametersVar;

// gadget for private coin account membership
#[allow(dead_code)]
pub type MantaCoinAccountMembershipVar = PathVar<MerkleTreeParams, HashVar, Fq>;

//=======================
// ZK proofs over BLS curve
//=======================
#[allow(dead_code)]
pub type Groth16PK = <Groth16<Bls12_381> as SNARK<Fq>>::ProvingKey;
#[allow(dead_code)]
pub type Groth16PVK = <Groth16<Bls12_381> as SNARK<Fq>>::ProcessedVerifyingKey;
#[allow(dead_code)]
pub type Groth16VK = <Groth16<Bls12_381> as SNARK<Fq>>::VerifyingKey;
pub type Groth16Proof = <Groth16<Bls12_381> as SNARK<Fq>>::Proof;

//=======================
// Commitments
//=======================
pub type MantaCoinCommitmentSchemeVar = CommGadget<EdwardsProjective, EdwardsVar, PedersenWindow>;
pub type MantaCoinCommitmentParamVar = <MantaCoinCommitmentSchemeVar as CommitmentGadget<
    MantaCoinCommitmentScheme,
    Fq,
>>::ParametersVar;
pub type MantaCoinCommitmentOpenVar = <MantaCoinCommitmentSchemeVar as CommitmentGadget<
    MantaCoinCommitmentScheme,
    Fq,
>>::RandomnessVar;
pub type MantaCoinCommitmentOutputVar = AffineVar<EdwardsParameters, FpVar<Fq>>;
